// Generated by gencpp from file analytic_solver/analytic.msg
// DO NOT EDIT!


#ifndef ANALYTIC_SOLVER_MESSAGE_ANALYTIC_H
#define ANALYTIC_SOLVER_MESSAGE_ANALYTIC_H

#include <ros/service_traits.h>


#include <analytic_solver/analyticRequest.h>
#include <analytic_solver/analyticResponse.h>


namespace analytic_solver
{

struct analytic
{

typedef analyticRequest Request;
typedef analyticResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct analytic
} // namespace analytic_solver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::analytic_solver::analytic > {
  static const char* value()
  {
    return "6a2e34150c00229791cc89ff309fff21";
  }

  static const char* value(const ::analytic_solver::analytic&) { return value(); }
};

template<>
struct DataType< ::analytic_solver::analytic > {
  static const char* value()
  {
    return "analytic_solver/analytic";
  }

  static const char* value(const ::analytic_solver::analytic&) { return value(); }
};


// service_traits::MD5Sum< ::analytic_solver::analyticRequest> should match
// service_traits::MD5Sum< ::analytic_solver::analytic >
template<>
struct MD5Sum< ::analytic_solver::analyticRequest>
{
  static const char* value()
  {
    return MD5Sum< ::analytic_solver::analytic >::value();
  }
  static const char* value(const ::analytic_solver::analyticRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::analytic_solver::analyticRequest> should match
// service_traits::DataType< ::analytic_solver::analytic >
template<>
struct DataType< ::analytic_solver::analyticRequest>
{
  static const char* value()
  {
    return DataType< ::analytic_solver::analytic >::value();
  }
  static const char* value(const ::analytic_solver::analyticRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::analytic_solver::analyticResponse> should match
// service_traits::MD5Sum< ::analytic_solver::analytic >
template<>
struct MD5Sum< ::analytic_solver::analyticResponse>
{
  static const char* value()
  {
    return MD5Sum< ::analytic_solver::analytic >::value();
  }
  static const char* value(const ::analytic_solver::analyticResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::analytic_solver::analyticResponse> should match
// service_traits::DataType< ::analytic_solver::analytic >
template<>
struct DataType< ::analytic_solver::analyticResponse>
{
  static const char* value()
  {
    return DataType< ::analytic_solver::analytic >::value();
  }
  static const char* value(const ::analytic_solver::analyticResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ANALYTIC_SOLVER_MESSAGE_ANALYTIC_H
